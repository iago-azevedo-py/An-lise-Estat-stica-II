# Instale as bibliotecas necess√°rias caso n√£o as tenha
# !pip install yfinance pandas matplotlib seaborn statsmodels streamlit google-generativeai plotly

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from textwrap import wrap
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import google.generativeai as genai
from datetime import datetime
import scipy.stats as stats

# =============================================================================
# Configura√ß√£o da API do Gemini
# =============================================================================
def configure_gemini():
    """Configura a API do Gemini"""
    api_key = st.sidebar.text_input("Digite sua API Key do Google Gemini:", type="password")
    if api_key:
        genai.configure(api_key=api_key)
        return True
    else:
        st.sidebar.warning("Por favor, insira sua API Key do Google Gemini")
        return False

def ask_gemini_agent(question, data_context):
    """Agente de IA para responder d√∫vidas sobre an√°lise"""
    try:
        model = genai.GenerativeModel('gemini-2.5-flash')
        prompt = f"""
        Voc√™ √© um especialista em an√°lise estat√≠stica financeira. Com base nos seguintes dados:
        
        {data_context}
        
        Pergunta do usu√°rio: {question}
        
        Responda de forma clara e did√°tica, explicando os conceitos estat√≠sticos de maneira acess√≠vel.
        """
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"Erro ao consultar o agente: {str(e)}"

# =============================================================================
# Classe do Agente de IA para An√°lise de Investimentos
# =============================================================================
class AnalystAgent:
    """
    Um agente de IA que interpreta os resultados de uma an√°lise de regress√£o
    e correla√ß√£o para um investidor.
    """
    def __init__(self, correlation_value, regression_results, data_start_date, data_end_date):
        self.correlation = correlation_value
        self.results = regression_results
        self.start_date = data_start_date
        self.end_date = data_end_date

    def _interpret_correlation(self):
        """Interpreta a for√ßa e o sinal do coeficiente de correla√ß√£o."""
        sinal = "positiva" if self.correlation >= 0 else "negativa"
        if abs(self.correlation) >= 0.8:
            return f"muito forte e {sinal}"
        elif abs(self.correlation) >= 0.6:
            return f"forte e {sinal}"
        elif abs(self.correlation) >= 0.4:
            return f"moderada e {sinal}"
        else:
            return f"fraca e {sinal}"

    def generate_investment_report(self):
        """Gera um relat√≥rio completo explicando os resultados estat√≠sticos."""
        # Extraindo os valores do sum√°rio da regress√£o
        r_squared = self.results.rsquared
        p_value_brent = self.results.pvalues['Preco_Brent']
        coef_brent = self.results.params['Preco_Brent']
        coef_const = self.results.params['const']

        report = f"""
==============================================================================
        RELAT√ìRIO DE AN√ÅLISE DE INVESTIMENTO: PETR4 vs. PETR√ìLEO BRENT
==============================================================================

Ol√°! Eu sou seu Agente de An√°lise. Analisei os dados de {self.start_date} a {self.end_date}
e aqui est√£o os insights para fundamentar sua tese de investimento:

---
1. AN√ÅLISE DE ASSOCIA√á√ÉO (CORRELA√á√ÉO)
---
O coeficiente de correla√ß√£o de Pearson entre o pre√ßo da PETR4 e o do Brent foi de {self.correlation:.4f}.
Isso indica uma correla√ß√£o {self._interpret_correlation()}.

*   **Insight para o Investidor:** A sua hip√≥tese principal est√° correta. Existe uma
    rela√ß√£o estat√≠stica clara e poderosa entre as duas vari√°veis. Quando o
    petr√≥leo se move, a a√ß√£o da Petrobras tende a seguir na mesma dire√ß√£o.

---
2. AN√ÅLISE DE REGRESS√ÉO LINEAR (PODER PREDITIVO)
---
A regress√£o linear nos ajuda a entender o "quanto" e "com que certeza" essa rela√ß√£o acontece.

    a) Poder Explicativo (R-Quadrado - R¬≤):
       O R¬≤ do modelo foi de {r_squared:.3f}. Isso significa que aproximadamente {r_squared:.1%}
       da varia√ß√£o di√°ria no pre√ßo da PETR4 pode ser explicada pela varia√ß√£o no
       pre√ßo do Petr√≥leo Brent.

       *   **Insight para o Investidor:** Este √© um valor muito alto! Mostra que o pre√ßo do
           petr√≥leo √©, de longe, o principal motor de valor da a√ß√£o.

    b) Teste de Hip√≥tese (p-valor):
       O p-valor para a vari√°vel 'Preco_Brent' foi de {p_value_brent:.3g}. Como este valor
       √© praticamente zero (muito menor que 0.05), n√≥s rejeitamos a hip√≥tese
       de que a rela√ß√£o √© mero acaso.

       *   **Insight para o Investidor:** A rela√ß√£o n√£o √© uma coincid√™ncia. Ela √©
           estatisticamente significativa e confi√°vel.

    c) O Modelo Preditivo (Coeficientes):
       A equa√ß√£o do modelo √©: Pre√ßo_PETR4 = {coef_const:.2f} + {coef_brent:.2f} * Pre√ßo_Brent

       *   **INSIGHT-CHAVE (A REGRA DE BOLSO):** O coeficiente de {coef_brent:.2f} √© a sua
           informa√ß√£o mais valiosa. Ele sugere que, em m√©dia, para cada
           aumento de $1 no barril de Brent, o modelo prev√™ que o pre√ßo da
           PETR4 tende a subir R$ {coef_brent:.2f}.

---
CONCLUS√ÉO E RECOMENDA√á√ÉO
---
Sua tese de investimento est√° estatisticamente validada. O pre√ßo da PETR4
√© fortemente e positivamente influenciado pelo pre√ßo do petr√≥leo Brent.

**Pr√≥ximo Passo Sugerido:** Para criar um modelo ainda mais robusto, o pr√≥ximo
passo ideal √© adicionar a taxa de c√¢mbio (USD/BRL) √† an√°lise, transformando-a
em uma regress√£o m√∫ltipla. Isso provavelmente aumentar√° o poder explicativo
(R¬≤) do seu modelo.

==============================================================================
        FIM DO RELAT√ìRIO
==============================================================================
        """
        return report

# =============================================================================
# Script Principal de An√°lise - Dashboard
# =============================================================================

st.set_page_config(
    page_title="Dashboard: An√°lise PETR4 vs Brent",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üìä Dashboard: An√°lise Estat√≠stica PETR4 vs Petr√≥leo Brent")
st.markdown("---")

# Sidebar para configura√ß√µes
st.sidebar.title("‚öôÔ∏è Configura√ß√µes")

# Configura√ß√£o do Gemini
gemini_configured = configure_gemini()

# Par√¢metros de an√°lise
st.sidebar.subheader("üìÖ Per√≠odo de An√°lise")
start_date = st.sidebar.date_input("Data Inicial", value=pd.to_datetime('2019-01-01'))
end_date = st.sidebar.date_input("Data Final", value=pd.to_datetime('today'))

# 1. Coleta e Prepara√ß√£o dos Dados
@st.cache_data
def load_data(start_date, end_date):
    tickers = ['PETR4.SA', 'BZ=F']
    raw_data = yf.download(tickers, start=start_date, end=end_date)
    
    # Ajuste para MultiIndex ou SingleIndex
    if isinstance(raw_data.columns, pd.MultiIndex):
        if 'Adj Close' in raw_data.columns.get_level_values(0):
            data = raw_data['Adj Close'].copy()
        elif 'Close' in raw_data.columns.get_level_values(0):
            data = raw_data['Close'].copy()
        else:
            data = raw_data.iloc[:, :].copy()
            data.columns = [col[0] if isinstance(col, tuple) else col for col in data.columns]
    else:
        data = raw_data.copy()
    
    data.rename(columns={'PETR4.SA': 'Preco_PETR4', 'BZ=F': 'Preco_Brent'}, inplace=True)
    data.dropna(inplace=True)
    return data

with st.spinner('üîÑ Carregando dados...'):
    data = load_data(start_date, end_date)

# M√©tricas gerais
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("üìä Dados Analisados", f"{len(data):,}")
with col2:
    st.metric("üìà PETR4 Atual", f"R$ {data['Preco_PETR4'].iloc[-1]:.2f}")
with col3:
    st.metric("üõ¢Ô∏è Brent Atual", f"${data['Preco_Brent'].iloc[-1]:.2f}")
with col4:
    correlation = data['Preco_PETR4'].corr(data['Preco_Brent'])
    st.metric("üîó Correla√ß√£o", f"{correlation:.4f}")

st.markdown("---")

# 2. Visualiza√ß√µes e An√°lises
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìà S√©rie Temporal", "üîó Correla√ß√£o", "üìä Regress√£o", "üìã Relat√≥rio", "ü§ñ Chat IA"])

with tab1:
    st.subheader("üìà Evolu√ß√£o dos Pre√ßos")
    
    # Gr√°fico de s√©rie temporal
    fig_time = make_subplots(
        rows=2, cols=1,
        subplot_titles=('Pre√ßos Normalizados (Base 100)', 'Pre√ßos Absolutos'),
        vertical_spacing=0.1
    )
    
    # Normalizar pre√ßos para compara√ß√£o
    data_norm = data.div(data.iloc[0]).mul(100)
    
    fig_time.add_trace(
        go.Scatter(x=data.index, y=data_norm['Preco_PETR4'], name='PETR4', line=dict(color='blue')),
        row=1, col=1
    )
    fig_time.add_trace(
        go.Scatter(x=data.index, y=data_norm['Preco_Brent'], name='Brent', line=dict(color='orange')),
        row=1, col=1
    )
    
    fig_time.add_trace(
        go.Scatter(x=data.index, y=data['Preco_PETR4'], name='PETR4 (R$)', line=dict(color='blue'), showlegend=False),
        row=2, col=1
    )
    
    fig_time2 = fig_time.add_trace(
        go.Scatter(x=data.index, y=data['Preco_Brent'], name='Brent (US$)', line=dict(color='orange'), yaxis='y3', showlegend=False),
        row=2, col=1
    )
    
    fig_time.update_layout(height=600, title_text="Evolu√ß√£o Temporal dos Pre√ßos")
    fig_time.update_yaxes(title_text="Base 100", row=1, col=1)
    fig_time.update_yaxes(title_text="PETR4 (R$)", row=2, col=1)
    
    st.plotly_chart(fig_time, use_container_width=True)

with tab2:
    st.subheader("üîó An√°lise de Correla√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de dispers√£o interativo
        fig_scatter = px.scatter(
            data, x='Preco_Brent', y='Preco_PETR4',
            title='Dispers√£o: PETR4 vs Brent',
            labels={'Preco_Brent': 'Pre√ßo Brent (US$)', 'Preco_PETR4': 'Pre√ßo PETR4 (R$)'},
            trendline='ols'
        )
        fig_scatter.update_layout(height=400)
        st.plotly_chart(fig_scatter, use_container_width=True)
        
        # Teste de correla√ß√£o
        corr_coef, p_value_corr = stats.pearsonr(data['Preco_PETR4'], data['Preco_Brent'])
        
        st.markdown("**üìä Resultados do Teste de Correla√ß√£o:**")
        st.write(f"‚Ä¢ **Coeficiente de Correla√ß√£o:** {corr_coef:.4f}")
        st.write(f"‚Ä¢ **P-valor:** {p_value_corr:.2e}")
        st.write(f"‚Ä¢ **Interpreta√ß√£o:** {'Correla√ß√£o significativa' if p_value_corr < 0.05 else 'Correla√ß√£o n√£o significativa'}")
    
    with col2:
        # Matriz de correla√ß√£o visual
        corr_matrix = data.corr()
        fig_heatmap = px.imshow(
            corr_matrix, 
            text_auto=True, 
            aspect="auto",
            title="Matriz de Correla√ß√£o",
            color_continuous_scale='RdBu'
        )
        fig_heatmap.update_layout(height=400)
        st.plotly_chart(fig_heatmap, use_container_width=True)
        
        # Distribui√ß√£o dos retornos
        returns = data.pct_change().dropna()
        
        fig_dist = make_subplots(rows=1, cols=2, subplot_titles=('Distribui√ß√£o PETR4', 'Distribui√ß√£o Brent'))
        
        fig_dist.add_trace(
            go.Histogram(x=returns['Preco_PETR4'], name='PETR4', nbinsx=50, opacity=0.7),
            row=1, col=1
        )
        fig_dist.add_trace(
            go.Histogram(x=returns['Preco_Brent'], name='Brent', nbinsx=50, opacity=0.7),
            row=1, col=2
        )
        
        fig_dist.update_layout(height=300, title_text="Distribui√ß√£o dos Retornos Di√°rios")
        st.plotly_chart(fig_dist, use_container_width=True)

with tab3:
    st.subheader("üìä An√°lise de Regress√£o Linear")
    
    # C√°lculos estat√≠sticos
    Y = data['Preco_PETR4']
    X = sm.add_constant(data['Preco_Brent'])
    model = sm.OLS(Y, X)
    results = model.fit()
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de regress√£o com residuals
        predictions = results.predict()
        residuals = Y - predictions
        
        fig_reg = make_subplots(
            rows=2, cols=1,
            subplot_titles=('Regress√£o Linear', 'An√°lise de Res√≠duos'),
            vertical_spacing=0.1
        )
        
        # Gr√°fico de regress√£o
        fig_reg.add_trace(
            go.Scatter(x=data['Preco_Brent'], y=data['Preco_PETR4'], mode='markers', name='Dados Observados', opacity=0.6),
            row=1, col=1
        )
        fig_reg.add_trace(
            go.Scatter(x=data['Preco_Brent'], y=predictions, mode='lines', name='Linha de Regress√£o', line=dict(color='red')),
            row=1, col=1
        )
        
        # Gr√°fico de res√≠duos
        fig_reg.add_trace(
            go.Scatter(x=predictions, y=residuals, mode='markers', name='Res√≠duos', showlegend=False),
            row=2, col=1
        )
        fig_reg.add_hline(y=0, line_dash="dash", line_color="red", row=2, col=1)
        
        fig_reg.update_layout(height=600, title_text="An√°lise de Regress√£o")
        fig_reg.update_yaxes(title_text="PETR4 (R$)", row=1, col=1)
        fig_reg.update_yaxes(title_text="Res√≠duos", row=2, col=1)
        fig_reg.update_xaxes(title_text="Brent (US$)", row=2, col=1)
        
        st.plotly_chart(fig_reg, use_container_width=True)
    
    with col2:
        # M√©tricas da regress√£o
        st.markdown("**üìà M√©tricas do Modelo:**")
        
        metrics_col1, metrics_col2 = st.columns(2)
        with metrics_col1:
            st.metric("R¬≤", f"{results.rsquared:.4f}")
            st.metric("R¬≤ Ajustado", f"{results.rsquared_adj:.4f}")
            
        with metrics_col2:
            st.metric("F-statistic", f"{results.fvalue:.2f}")
            st.metric("P-valor (F)", f"{results.f_pvalue:.2e}")
        
        st.markdown("**üî¢ Coeficientes:**")
        coef_df = pd.DataFrame({
            'Coeficiente': results.params,
            'Erro Padr√£o': results.bse,
            'P-valor': results.pvalues,
            'IC Inferior': results.conf_int()[0],
            'IC Superior': results.conf_int()[1]
        })
        st.dataframe(coef_df, use_container_width=True)
        
        # Testes de normalidade dos res√≠duos
        shapiro_stat, shapiro_p = stats.shapiro(residuals)
        st.markdown("**üß™ Testes dos Res√≠duos:**")
        st.write(f"‚Ä¢ **Shapiro-Wilk (Normalidade):** {shapiro_p:.4f}")
        st.write(f"‚Ä¢ **Interpreta√ß√£o:** {'Res√≠duos normais' if shapiro_p > 0.05 else 'Res√≠duos n√£o normais'}")

with tab4:
    st.subheader("üìã Relat√≥rio Completo")
    
    # Gerar relat√≥rio usando a classe AnalystAgent
    agent = AnalystAgent(
        correlation_value=correlation,
        regression_results=results,
        data_start_date=data.index.min().strftime('%d/%m/%Y'),
        data_end_date=data.index.max().strftime('%d/%m/%Y')
    )
    
    investment_report = agent.generate_investment_report()
    
    # Exibir o relat√≥rio em formato markdown para melhor formata√ß√£o
    st.markdown(f"""
    ```
    {investment_report}
    ```
    """)
    
    # Bot√£o para download do relat√≥rio
    st.download_button(
        label="üì• Baixar Relat√≥rio",
        data=investment_report,
        file_name=f"relatorio_petr4_brent_{datetime.now().strftime('%Y%m%d')}.txt",
        mime="text/plain"
    )

with tab5:
    st.subheader("ü§ñ Chat com Agente de IA")
    
    if gemini_configured:
        # Contexto dos dados para o agente
        data_context = f"""
        Dados analisados: {len(data)} observa√ß√µes de {data.index.min().strftime('%d/%m/%Y')} a {data.index.max().strftime('%d/%m/%Y')}
        Correla√ß√£o PETR4-Brent: {correlation:.4f}
        R¬≤ da regress√£o: {results.rsquared:.4f}
        Coeficiente angular: {results.params['Preco_Brent']:.4f}
        P-valor da regress√£o: {results.f_pvalue:.2e}
        """
        
        # Interface do chat
        if "messages" not in st.session_state:
            st.session_state.messages = []
        
        # Exibir hist√≥rico de mensagens
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input do usu√°rio
        if prompt := st.chat_input("Fa√ßa uma pergunta sobre a an√°lise..."):
            # Adicionar mensagem do usu√°rio
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Gerar resposta do agente
            with st.chat_message("assistant"):
                with st.spinner("ü§î Pensando..."):
                    response = ask_gemini_agent(prompt, data_context)
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
        
        # Bot√£o para limpar chat
        if st.button("üóëÔ∏è Limpar Chat"):
            st.session_state.messages = []
            st.session_state.clear()
            
    else:
        st.warning("‚ö†Ô∏è Configure sua API Key do Google Gemini na barra lateral para usar o chat.")
        st.markdown("""
        **Como obter sua API Key:**
        1. Acesse [Google AI Studio](https://makersuite.google.com/app/apikey)
        2. Crie uma nova API Key
        3. Copie e cole na barra lateral
        """)